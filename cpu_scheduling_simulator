#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#define LINE_MAX 1024

int prem=0;
struct node
{
    int burst_Time, arrival_Time, priority, pc;
    struct node *after;

};
struct node *head;

struct node *create_insert(int burst_Time,int arrival_Time,int priority,int p){
	struct node * tmp;
	tmp=(struct node *) malloc (sizeof (struct node));
	tmp->burst_Time=burst_Time;
	tmp->arrival_Time=arrival_Time;
	tmp->priority=priority;
	tmp->pc=p;
	tmp->after= NULL;
	return tmp;
	
}
struct node *Back(struct node *head, int burstTime, int arrivalTime, int priority, int cn)
{
    struct node *tmp = create_insert(burstTime, arrivalTime, priority, cn);
    struct node *data;
    if (head == NULL)
    {
        head = tmp;
        return head;
    }
    data = head;
    while (data->after != NULL)
    data = data->after;
    data->after = tmp;
    return head;
}

struct node *readFile ();
void sim();
void scheduling();
void Arrival_sort();
void swap();
void Job_sort(); 
void FCFS();
void SJFSNP();
void SJFSP();
void RR();
void PRIORITYPREM();
void PRIORITYNP();
void Priority_sort();
int Nodes_count();
char *inp,*outp,arg;

int main(int argc,char **argv){ 


	while((arg=getopt(argc,argv,"f:o:")) !=-1){
			
	if(arg=='f'){
		inp=optarg;
	}
	else if(arg=='o'){
		outp=optarg;
}	}                                      
	
 readFile();	
 sim();

return 0;
}

struct node *readFile(){
	FILE *fp;
char line[LINE_MAX];
unsigned int num[3];
int processcount;

	if ((fp = fopen("input.txt", "r")) == NULL){
	printf("error opening the input file \n");
        return 0;
        }
	while (fgets(line, LINE_MAX, fp) != NULL) {
	processcount++;
        sscanf(line,"%d:%d:%d\n",&num[0],&num[1],&num[2]);
       head=Back(head,num[0],num[1],num[2],processcount);     
}

	fclose(fp);

    return head;
}
void sim(void){
	int choice;
	printf("CPU scheduler simulator \n");
	printf("1)secheduling method\n");
	printf("2)preemptive moode\n");
	printf("3)Non-preemptive mode\n");
	printf("4)show results for all methods\n");
	printf("5)End the program\n");
   	printf("please enter your choise:\n");

	scanf("%d", &choice);


	if(choice==1){
	scheduling();
	}
	
	else if(choice==2){
	prem=1;
	sim();
	}
	
	else if (choice==3){
	prem=0;
	sim();
	}
	
	else if (choice==4){
	if(prem==0){
	RR();	              	
 	SJFSNP();
 	FCFS();
 	PRIORITYNP();
	}
	
 	else if(prem==1){
 	RR();
 	FCFS(); 
 	SJFSP();
 	PRIORITYPREM(); 	
 	}
 	
	}
	else if (choice==5){
		printf("closing the program");
		exit (1);
		 	}
	else{
	printf("wrong input\n");
	sim();
	}	

}

void scheduling(void){
	int choice;
	printf("scheduling Methods\n");
	printf("1)First-come,first-served\n");
   	printf("2)Shortest-Job-first scheduling\n");
    	printf("3)Round-Robin scheduling\n");
    	printf("4)Priority scheduling\n");
	scanf("%d",&choice);
	
	if(choice==1){
	FCFS();
	}
	
	else if(choice==2){
	if(prem==0)
	
	SJFSNP();
	else if (prem==1){
		SJFSP();
	}
	}
	
	else if(choice==3)
	{
	RR();
	}
	
	else if(choice==4)
	{
	if(prem==0)
	PRIORITYNP();	
	
	else if(prem==1){
	 PRIORITYPREM(); 	
	}
	}
	}
	
void swap(struct node *i, struct node *j){
	
int tempBurstTime,tempArrivalTime,temp_priority,temp_pc;

	 tempBurstTime = i->burst_Time;
	 i->burst_Time = j->burst_Time;
	 j->burst_Time = tempBurstTime;
	 tempArrivalTime = i->arrival_Time;
	 i->arrival_Time = j->arrival_Time;
	 j->arrival_Time = tempArrivalTime;
	 temp_priority = i->priority;
	 i->priority = j->priority;
	 j->priority = temp_priority;
	 temp_pc = i->pc;
	  i->pc = j->pc;
	 j->pc = temp_pc;
}

void Arrival_sort(struct node *head){
	struct node *tmp = head;   
        while (tmp->after != NULL)
        {
            if (tmp->arrival_Time > tmp->after->arrival_Time)
            {
                swap(tmp, tmp->after);       
            }
           tmp = tmp->after;
        }
        head = tmp;      	 
	}
	
void Job_sort(struct node *head){
	
	 struct node *temp = head;	
         while (temp->after != NULL)
        {
            if (temp->burst_Time > temp->after->burst_Time)
            {
                swap(temp,temp->after);
                
            }
       temp = temp->after;
        }
        head = temp;    
}	
	
void FCFS(void){    
	FILE *out; 
	 out=fopen(outp,"output.txt");                                      
	printf("first come first served \n Process waiting Time:");
	fprintf(out,"\nfirst come first served \n Process waiting Time:");
        int waitingTime=0,counter=0,total_WaitingTime=0,pc=0;
        double averagewaiting_time=0;
        struct node *tmp=head;

        while(tmp!=NULL){ 
	Arrival_sort(head);
	tmp=tmp->after;} 
	tmp=head;
	    
	while(tmp!=NULL){
	counter++;
	waitingTime=waitingTime-tmp->arrival_Time;
	pc=tmp->pc;
	printf("\n p%d = %d ms",pc,waitingTime);
      	total_WaitingTime=total_WaitingTime+waitingTime;
      	waitingTime=waitingTime+tmp->burst_Time+tmp->arrival_Time;
      	tmp=tmp->after; 
      	 }	
      	averagewaiting_time=total_WaitingTime/counter;
	printf("\n average waiting Time = %.2f ms",averagewaiting_time);
	fprintf(out,"\n The Average Waiting Time = %0.2f ms.",averagewaiting_time);
	fclose(out);	   	   
	sim();	
	 }	


void SJFSNP(void){
	printf(" Shortest-job, first-served Non-preemptive\n processes waiting time:");
	struct node *temp=head;
	struct node *tmp=temp;
    int counter=Nodes_count(temp);
    
    int n=0,j=0,arriv[counter],burst[counter],pc[counter], w=0,tmpburst=0,totalWait=0;
    
    while(temp!=NULL){
    Job_sort(tmp);
    temp=temp->after; 
		}
		
		temp=tmp;
    for(n;n<counter;n++){
    burst[n]=temp->burst_Time;
	arriv[n]=temp->arrival_Time;
	pc[n]=temp->pc;
	temp=temp->after;
    		}
 	for(int i=0; i<counter; i++){
	for(j=0 ;j<counter;j++){
	if(w - arriv[j] >= 0 && burst[j] != 0){
		w=w - arriv[j];
		totalWait=totalWait+w;
		
		printf("\n p%d = %d ms",pc[j],w);

		w=w + burst[j] + arriv[j];
		burst[j]=0;
		}	
	}	
}

double Avgwait=totalWait/(float)counter;
 printf("\n Average Waiting Time = %.2f ms",Avgwait);

 sim();
}


int Nodes_count(struct node *head){
	int counter=0;
	struct node *temp=head;
	while(temp!=NULL){
		counter++;
		temp=temp->after;
	}
	return counter;
}

void SJFSP(void){
	printf("Shortest-job, first-served preemptive\n processes waiting time:");	
	struct node *temp=head;
	struct node *tmp=temp;
    int counter=Nodes_count(temp);
    int n=0,j=0,burst[counter],arriv[counter],pc[counter], waiting[counter],tmpburst=0,total_Waiting=0,w=0,m=0,totalburst=0,count[counter];
    
    while(temp!=NULL){
    Job_sort(tmp);
    temp=temp->after;
		}
		
		 for(m=0;m<counter;m++){
    	waiting[m]=0;
    	count[m]=0;	}
		
		temp=tmp;
    for(n;n<counter;n++){
    burst[n]=temp->burst_Time;
	arriv[n]=temp->arrival_Time;
	pc[n]=temp->pc;
	temp=temp->after;
    		}
    		
    		for(n=0;n<counter;n++){
    			totalburst=totalburst+burst[n];
			}
    		
for(int i =0;i<totalburst;i++){	

  for(j=0;j<counter;j++){
  	 
	if(w-arriv[j] >= 0 && burst[j] != 0 ){
		
		for(m=0;m<counter;m++){
			for(n=m+1;n<counter;n++){
		if(burst[m] == burst[n] && arriv[m]>arriv[n]){
	int a=burst[m];
	burst[m]=burst[n];
	burst[n]=a;
	
	a=arriv[m];
	arriv[m]=arriv[n];
	arriv[n]=a;
	a=pc[m];
	pc[m]=pc[n];
	pc[n]=a;
	a=count[m];
	count[m]=count[n];
	count[n]=a;
	a=waiting[m];
	waiting[m]=waiting[n];
	waiting[n]=a;
		}}}
	waiting[j]=w-count[j];
	burst[j]--;
	count[j]++;
	w++; 
	  j=counter-1;	
	  }		
		 }
	}
for(j=0;j<counter;j++){
 	waiting[j]=waiting[j]-arriv[j];
 	printf("\np%d = %d ms",pc[j],waiting[j]);
	 total_Waiting=total_Waiting+waiting[j] ;
	 }
double averagewaiting_Time=total_Waiting/(float)counter;
 printf("\n average Waiting Time = %.2f ms",averagewaiting_Time);
 
 sim();
}

void RR(void)
{
	int quant;
	printf("RR quantum Time:");
	scanf("%d",&quant);
	
	struct node *temp=head;
	struct node *tmp=temp;
	int counter;
    counter=Nodes_count(temp);
    int n=0,j=0,burst[counter],arriv[counter],pc[counter], waiting[counter],total_Waiting=0,w=0,count[counter];
    
    while(temp!=NULL){
    Arrival_sort(tmp);
    temp=temp->after;
		}
    temp=tmp;
    for(n;n<counter;n++){
    burst[n]=temp->burst_Time;
    arriv[n]=temp->arrival_Time;
    pc[n]=temp->pc;
    temp=temp->after;
    		}
    for(int m=0;m<counter;m++){
    waiting[m]=0;
    count[m]=0;
}
		
 for(int i=0 ;i<counter; i++){

for(j=0 ;j<counter; j++){

	if(w-arriv[j] >= 0 && burst[j] != 0){
		
		if(burst[j]<quant){
        	waiting[j]=w-(quant*count[j]);
			w=w+burst[j];
        	burst[j]=burst[j]-burst[j];
				}
		else{
	waiting[j]=w-(quant*count[j]);
	burst[j]=burst[j]-quant;
    w=w+quant;
    count[j]++;
    	}
	}
}	
 }
 for(j=0;j<counter;j++){
 	waiting[j]=waiting[j]-arriv[j];
 	printf("\np%d = %d ms",pc[j],waiting[j]);

	 total_Waiting=total_Waiting+waiting[j] ;
	 }
double averagewaiting_Time=total_Waiting/(float)counter;
 printf("\n Average Waiting Time = %.2f ms",averagewaiting_Time);

  sim();
}



void Priority_sort(struct node *head){
	
	 struct node *tempdata = head;
   
       
        while (tempdata->after != NULL)
        {
            if (tempdata->priority > tempdata->after->priority)
            {
                swap(tempdata, tempdata->after);
                
            }
           tempdata = tempdata->after;
        }
        head = tempdata;    
  
}
void PRIORITYPREM(void){
  	printf("Priority scheduling preemptive\n processes waiting time:");
	
	struct node *temp=head;
	struct node *tmp2=temp;
    int counter=Nodes_count(temp);
    int n=0,i=0 , j=0,prio[counter],burst[counter],arrival[counter],pc[counter], waiting[counter],tempburst=0,totalWaiting=0,wait=0,m=0,totalburst=0,count[counter],a=0;
    
    while(temp!=NULL){
    Job_sort(tmp2);
    temp=temp->after;
		}
		
		 for(m=0;m<counter;m++){
    	waiting[m]=0;
    	count[m]=0;

	}
		
		temp=tmp2;
    for(n;n<counter;n++){
    prio[n]=temp->priority;
    burst[n]=temp->burst_Time;
	arrival[n]=temp->arrival_Time;
	pc[n]=temp->pc;
	temp=temp->after;
    		}
    		
    		for(n=0;n<counter;n++){
    			totalburst=totalburst+burst[n];
			}
    		
for(i;i<totalburst;i++){	

  for(j=0;j<counter;j++){
  	 
	if(wait-arrival[j] >= 0 && burst[j] != 0 ){
		
		for(m=0;m<counter;m++){
			for(n=m+1;n<counter;n++){
		if(prio[m] == prio[n] && arrival[m]>arrival[n]){
	int a=prio[m];
	prio[m]=prio[n];
	prio[n]=a;
	
	a=burst[m];
	burst[m]=burst[n];
	burst[n]=a;
	
	a=arrival[m];
	arrival[m]=arrival[n];
	arrival[n]=a;
	
	a=pc[m];
	pc[m]=pc[n];
	pc[n]=a;
	
	a=count[m];
	count[m]=count[n];
	count[n]=a;
	
	a=waiting[m];
	waiting[m]=waiting[n];
	waiting[n]=a;
		}	}}
			waiting[j]=wait-count[j];
			burst[j]--;
			count[j]++;
			wait++; 
		   j=counter-1;	}
		   	
				   }
	}

for(j=0;j<counter;j++){
 	waiting[j]=waiting[j]-arrival[j];
 	
 	printf("\np%d = %d ms",pc[j],waiting[j]);
 	
	 totalWaiting=totalWaiting+waiting[j] ;
	 }
double averagewaiting=totalWaiting/(float)counter;
 printf("\n Average Waiting Time = %.2f  ms.",averagewaiting);

sim();
}



void PRIORITYNP()
{

	printf("priority\n processes waiting time:");
	
	struct node *temp=head;
	struct node *tmp=temp;
    int counter=Nodes_count(temp);
    int n=0,i=0,j=0,burst[counter],arriv[counter],pc[counter],priority[counter], w=0,totalWaiting=0;
    
    while(temp!=NULL){
    Priority_sort(tmp);
    temp=temp->after;
		}
		
		temp=tmp;
    for(n;n<counter;n++){
    burst[n]=temp->burst_Time;
	arriv[n]=temp->arrival_Time;
	pc[n]=temp->pc;
	priority[n]=temp->priority;
	temp=temp->after;
    		}
    		
	 for(i;i<counter;i++){
	for(j=0;j<counter;j++){
	if(w-arriv[j] >= 0 && burst[j] != 0){
		w=w-arriv[j];
		totalWaiting=totalWaiting+w;
		printf("\n p%d = %d ms",pc[j],w);
		w=w+burst[j]+arriv[j];
		burst[j]=0;
	}
}	
 }
double avgwait=totalWaiting/counter;
 printf("\n Average Waiting Time = %.2f  ms.",avgwait);

  sim();     
}
